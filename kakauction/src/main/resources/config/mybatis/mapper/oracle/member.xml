<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="config.mybatis.mapper.oracle.member">
	<insert id="insertMember" parameterType="MemberVO">
		<if test="memberGrade=='ADMIN'">
			insert into member(MEMBER_ID, MEMBER_NAME, MEMBER_PWD, MEMBER_JUMIN, MEMBER_EMAIL, MEMBER_HP, 
			MEMBER_GENDER, MEMBER_ZIPCODE, MEMBER_ADDR, MEMBER_ADDR2, MEMBER_GRADE)
			values(#{memberId},#{memberName},#{memberPwd},#{memberJumin},#{memberEmail},
			#{memberHp},#{memberGender},#{memberZipcode},#{memberAddr},#{memberAddr2},#{memberGrade})
		</if>
		<if test="memberGrade!='ADMIN'">
			insert into member(MEMBER_ID, MEMBER_NAME, MEMBER_PWD, MEMBER_JUMIN, MEMBER_EMAIL, MEMBER_HP, 
			MEMBER_GENDER, MEMBER_ZIPCODE, MEMBER_ADDR, MEMBER_ADDR2)
			values(#{memberId},#{memberName},#{memberPwd},#{memberJumin},#{memberEmail},
			#{memberHp},#{memberGender},#{memberZipcode},#{memberAddr},#{memberAddr2})
		</if>
	</insert>
	
	<insert id="addExcel" parameterType="java.util.HashMap">
		insert all
		<foreach collection="list" item="item" separator=" ">
		into member(
				MEMBER_ID, MEMBER_NAME, MEMBER_PWD, MEMBER_JUMIN, MEMBER_EMAIL, MEMBER_HP, 
				MEMBER_GENDER, MEMBER_ZIPCODE, MEMBER_ADDR, MEMBER_ADDR2
		)values	
			(
			#{item.memberId},#{item.memberName},#{item.memberPwd},#{item.memberJumin},#{item.memberEmail},
			#{item.memberHp},#{item.memberGender},#{item.memberZipcode},#{item.memberAddr},#{item.memberAddr2}
			)
		</foreach>
		SELECT * FROM DUAL
	</insert>
	
	<select id="selectMemberByUserid" parameterType="string" resultType="MemberVO">
		select * from member where member_id = #{memberId}
	</select>
	
	<update id="updateMember" parameterType="MemberVO">
		update member 
		set MEMBER_EMAIL=#{memberEmail}, MEMBER_HP=#{memberHp}, MEMBER_ZIPCODE=#{memberZipcode}, MEMBER_ADDR=#{memberAddr}, MEMBER_ADDR2=#{memberAddr2}
		where MEMBER_ID=#{memberId}
	</update>
	
	<select id="selectPwd" parameterType="MemberVO" resultType="string">
		select MEMBER_PWD from member where MEMBER_ID=#{memberId} and MEMBER_OUTDATE is null
		<if test="memberGrade=='ADMIN'">
			and member_grade=#{memberGrade}
		</if>
	</select>
	
	<select id="selectCountUserid" parameterType="string" resultType="int">
		select count(*) from member where MEMBER_ID=#{memberId}
	</select>
	
	<select id="selectCountJumin" parameterType="string" resultType="int">
		select count(*) from member where member_jumin=#{memberJumin}
	</select>

	<update id="outMember" parameterType="String">
		update member set member_outdate=sysdate 
		    where member_id=#{memberId} and member_outdate is null
	</update>	
	
	<select id="getPwd" parameterType="MemberVO" resultType="string">
		select member_pwd from member where member_id=#{memberId} and member_email=#{memberEmail}
	</select>
	
	<update id="updatePwd" parameterType="MemberVO">
		update member set member_pwd =#{memberPwd} where member_id=#{memberId}
	</update>
	
	<select id="selectAllMember" resultType="MemberVO">
		select * from member
	</select>

	<select id="selectAllMember2" parameterType="SearchVO" resultType="MemberVO">
		select * from(
			select rownum as RNUM, LIST_ALL.* from(
				select * from member where member_Grade!='ADMIN' and member_outdate is null
			)LIST_ALL
		)
		<![CDATA[
		where  RNUM> #{firstRecordIndex} 
			and RNUM<= #{firstRecordIndex}+#{recordCountPerPage}
		]]>
	</select>
	
	<sql id="searchMemberWhere">
		<where>
			<if test="searchKeyword!=null and searchKeyword!=''">
				${searchCondition} like '%' || #{searchKeyword} || '%'
			</if>
			<if test="memberGrade!=null and memberGrade!=''">
				and member_grade=#{memberGrade}
			</if>
			<if test="memberGender!=null and memberGender!=''">
				and member_gender=#{memberGender}
			</if>
		</where>
	</sql>
	
	<select id="selectSearchMember" parameterType="MemDeSearchVO" resultType="MemberVO">
		select * from(
			select rownum as RNUM, LIST_ALL.* from(
				select * from(
					select * from member 
					<include refid="searchMemberWhere"></include>
					order by member_regdate desc
					)where member_Grade!='ADMIN' and member_outdate is null
			)LIST_ALL
		)
		<![CDATA[
		where  RNUM> #{firstRecordIndex} 
			and RNUM<= #{firstRecordIndex}+#{recordCountPerPage}
		]]>
	</select>
	
	<select id="selectAllMemberCount" parameterType="SearchVO" resultType="int">
		select count(*) from member where member_Grade!='ADMIN' and member_outdate is null
	</select>
	
	<select id="selectAllMemberCount2" parameterType="MemDeSearchVO" resultType="int">
		select count(*) from (
			select * from member
			<include refid="searchMemberWhere"></include> 
		)
		where member_Grade!='ADMIN' and member_outdate is null
	</select>
	
	<update id="gradeUpdate" parameterType="MemberVO">
		update member set member_Grade=#{memberGrade} where member_id=#{memberId}
	</update>
	
	<select id="selectMemberCount" parameterType="string" resultType="int">
		select count(*) from member where member_Grade=#{memberGrade}
	</select>
	
	<update id="gradeUpdateMember" parameterType="MemberVO">
		update member set member_Grade=#{memberGrade} where member_id=#{memberId}
	</update>
	
	<select id="selectAuctionMember" parameterType="SearchVO" resultType="map">
		select * from(
			select rownum as RNUM, LIST_ALL.* from(
				select l.buyer_member_id, L.SELLER_MEMBER_ID, l.car_num,l.record_price,m.member_name,m.member_hp,l.LASTBUYER_REGDATE
				from lastbuyer l, member m where l.buyer_member_id=m.member_id order by lastbuyer_regdate
			)LIST_ALL
		)
		<![CDATA[
		where  RNUM> #{firstRecordIndex} 
			and RNUM<= #{firstRecordIndex}+#{recordCountPerPage}
		]]>
	</select>
	
	<select id="AuctionMemberCount" parameterType="SearchVO" resultType="int">
		select count(*) from lastbuyer
	</select>
	
	<select id="whereMemberGrade" parameterType="string" resultType="string">
		select member_grade from member where member_Id=#{memberId}
	</select>
	
	<!-- 마일리지 -->
	<update id="updateMileage" parameterType="MemberVO">
		update member set member_mileage=#{memberMileage} where member_id=#{memberId}
	</update>
	
	<!-- 아이디 찾기 -->
	<select id="findMemberId" parameterType="MemberVO" resultType="string">
		select member_id from member where member_name=#{memberName} and member_hp=#{memberHp} 
	</select>
</mapper>